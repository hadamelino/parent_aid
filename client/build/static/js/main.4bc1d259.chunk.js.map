{"version":3,"sources":["logo.svg","services/geminiService.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","GoogleGenerativeAI","require","model","getGenerativeModel","async","generateStory","moral","promptForTheStory","prompt","concat","result","generateContent","response","text","generatePrompt","finalStoryPrompt","App","story","setStory","useState","setMoral","React","createElement","className","class","id","onSubmit","event","console","log","preventDefault","url","audioContent","axios","post","input","voice","languageCode","ssmlGender","audioConfig","audioEncoding","data","writeFile","util","promisify","fs","synthesizeSpeech","for","required","name","onChange","chosenMoral","target","value","type","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,waCC3C,MAAM,mBAAEC,GAAuBC,EAAQ,KAGjCC,EADQ,IAAIF,EAAmB,2CACjBG,mBAAmB,CAAED,MAAO,qBAYhDE,eAAeC,EAAcC,GACzB,MAAMC,QAXVH,eAA8BE,GAC1B,MAAME,EAAM,qDAAAC,OAAwDH,GAE9DI,QAAeR,EAAMS,gBAAgBH,GAI3C,aAHuBE,EAAOE,UACRC,OAMUC,CAAeR,GAEzCS,EAAgB,iEAAAN,OAAoEF,GAEpFG,QAAeR,EAAMS,gBAAgBI,GAG3C,aAFuBL,EAAOE,UACRC,O,aC0DXG,MAvEf,WAEE,IAAKC,EAAOC,GAAYC,mBAAS,KAC5Bb,EAAOc,GAAYD,mBAAS,IAiCjC,OACEE,IAAAC,cAAA,OAAKC,UAAU,oCACbF,IAAAC,cAAA,MAAIC,UAAU,QAAO,UAAOF,IAAAC,cAAA,QAAMC,UAAU,qCAAoC,MAAS,KACzFF,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,OAAKE,MAAM,iBACTH,IAAAC,cAAA,QAAMG,GAAG,UAAUC,SApB3BtB,eAA8BuB,GAC5BC,QAAQC,IAAI,4CAADpB,OAA6CH,IACxDqB,EAAMG,iBACN,MAAMpB,QAAeL,EAAcC,GACnCsB,QAAQC,IAAIvB,GACZsB,QAAQC,IAAInB,GACZQ,EAASR,GArBXN,eAAgCS,GAC9B,MACMkB,EAAG,8DAAAtB,OADO,2CAQVuB,SANiBC,IAAMC,KAAKH,EAAK,CACrCI,MAAO,CAAEtB,QACTuB,MAAO,CAAEC,aAAc,QAASC,WAAY,WAC5CC,YAAa,CAAEC,cAAe,UAGFC,KAAKT,aAC7BU,EAAYC,IAAKC,UAAUC,IAAGH,iBAC9BA,EAAU,aAAcV,EAAc,UAC5CJ,QAAQC,IAAI,6CAUZiB,CAAiB7B,KAcTI,IAAAC,cAAA,SAAOyB,IAAI,UAAUvB,MAAM,cAAa,wBACtCH,IAAAC,cAAA,UAAQE,MAAM,cAAcC,GAAG,UAAUuB,SAAS,OAAOC,KAAK,QAAQC,SAZlF,SAA2BvB,GACzB,MAAMwB,EAAcxB,EAAMyB,OAAOC,MACjCjC,EAAS+B,KAWG9B,IAAAC,cAAA,UAAQ+B,MAAM,IAAG,aACjBhC,IAAAC,cAAA,cAAQ,WACRD,IAAAC,cAAA,cAAQ,YACRD,IAAAC,cAAA,cAAQ,aACRD,IAAAC,cAAA,cAAQ,uBACRD,IAAAC,cAAA,cAAQ,0BACRD,IAAAC,cAAA,cAAQ,qBACRD,IAAAC,cAAA,cAAQ,sCAEVD,IAAAC,cAAA,UAAQE,MAAM,2BAA2B8B,KAAK,UAASjC,IAAAC,cAAA,SAAG,eAKhED,IAAAC,cAAA,OAAKE,MAAM,iBACLH,IAAAC,cAAA,SAAOyB,IAAI,iBAAiBvB,MAAM,cAAa,oBAC/CH,IAAAC,cAAA,OAAKC,UAAU,uBACbF,IAAAC,cAAA,KAAGC,UAAU,aAAaN,QC3D3BsC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhD,IAAAC,cAACN,EAAG,OAMNuC,M","file":"static/js/main.4bc1d259.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\n\nconst genAI = new GoogleGenerativeAI(\"AIzaSyDkqW7LbhmLQZ-jXsPcJ7ma1xlHYWiUS8M\");\nconst model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\"});\n\nasync function generatePrompt(moral) {\n    const prompt = `Generate a prompt to generate a kid's story about ${moral}`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n\n    return text \n}\n\nasync function generateStory(moral) {\n    const promptForTheStory = await generatePrompt(moral);\n\n    const finalStoryPrompt = `Generate a short story (2 paragraphs) about below criteria\\n\\n${promptForTheStory}`;\n    \n    const result = await model.generateContent(finalStoryPrompt);\n    const response = await result.response;\n    const text = response.text();\n    return text\n}\n\nexport { generatePrompt, generateStory };","import React from 'react';\nimport logo from './logo.svg';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport fs from 'fs'\nimport util from 'util'\nimport textToSpeech from '@google-cloud/text-to-speech'\nimport { generatePrompt, generateStory } from './services/geminiService';\nimport axios from 'axios'\n\nfunction App() {\n\n  let [story, setStory] = useState(\"\");\n  let [moral, setMoral] = useState(\"\");\n\n\n  async function synthesizeSpeech(text) {\n    const API_KEY = 'AIzaSyAnwv-xeLhD-wiCjP8xmB1qqETuCZuqlDk';\n    const url = `https://texttospeech.googleapis.com/v1/text:synthesize?key=${API_KEY}`;\n    const response = await axios.post(url, {\n      input: { text },\n      voice: { languageCode: 'en-US', ssmlGender: 'NEUTRAL' },\n      audioConfig: { audioEncoding: 'MP3' },\n    });\n  \n    const audioContent = response.data.audioContent;\n    const writeFile = util.promisify(fs.writeFile);\n    await writeFile('output.mp3', audioContent, 'base64');\n    console.log('Audio content written to file: output.mp3');\n  }\n\n  async function generateTapped(event) {\n    console.log(`Tapped will generate a story with moral: ${moral}`);\n    event.preventDefault();\n    const result = await generateStory(moral);\n    console.log(moral);\n    console.log(result);\n    setStory(result);\n    synthesizeSpeech(story);\n  }\n\n  function handleMoralChange(event) {\n    const chosenMoral = event.target.value;\n    setMoral(chosenMoral)\n  }\n\n  return (\n    <div className='container mx-5 my-5 main-content'>\n      <h1 className='mb-4'>Parent <span className='AI-span text-decoration-underline'>AI</span>d</h1>\n      <div className='row'>\n        <div class=\"col-md-6 pe-4\">\n          <form id=\"my-form\" onSubmit={generateTapped}>\n            <label for=\"country\" class=\"form-label\">Moral of the story: </label>\n              <select class=\"form-select\" id=\"country\" required=\"true\" name=\"moral\" onChange={handleMoralChange}>\n                <option value=\"\">Choose...</option>\n                <option>Honesty</option>\n                <option>Kindness</option>\n                <option>Hard Work</option>\n                <option>Courage and Bravery</option>\n                <option>Friendship and Loyalty</option>\n                <option>Sharing is Caring</option>\n                <option>Responsibility and Accountability</option>\n              </select>\n              <button class=\"btn mt-3 generate-button\" type=\"submit\"><b>Generate</b></button>\n          </form>\n\n        </div>\n\n        <div class=\"col-md-6 ps-4\">\n              <label for=\"generatedStory\" class=\"form-label\">Generated Story:</label>\n              <div className='generated-story-box'>\n                <p className='px-4 py-4'>{story}</p>\n              </div>\n        </div>\n      </div>\n      {/* Populate this div with components */}\n      \n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}